/** Task: Stack made of a linked list *  @author: Frank Carrano * * */package StackPackage;public class LinkedStack<T> implements StackInterface<T>,                                         java.io.Serializable{    private Node topNode; // references the first node in the chain        public LinkedStack()    {        topNode = null;    } // end default constructor    public void push(T newEntry)    {        Node newNode = new Node(newEntry, topNode);        topNode = newNode;    } // end push    public T peek()    {        T top = null;            if (topNode != null)            top = topNode.getData();            return top;    } // end peek    public T pop()    {        T top = peek();            if (topNode != null)            topNode = topNode.getNextNode();            return top;    } // end pop    public boolean isEmpty()    {        return topNode == null;    } // end isEmpty    public void clear()    {        topNode = null;    } // end clear    private class Node implements java.io.Serializable    {        private T       data;  // data portion        private Node next;  // link to next node        public Node(T dataPortion)        {            data = dataPortion;            next = null;            } // end constructor        public Node(T dataPortion, Node nextNode)        {            data = dataPortion;            next = nextNode;            } // end constructor        public T getData()        {            return data;        } // end getData                public void setData(T newData)        {            data = newData;        } // end setData                public Node getNextNode()        {            return next;        } // end getNextNode                public void setNextNode(Node nextNode)        {            next = nextNode;        } // end setNextNode    } // end Node} // end LinkedStack